<meta charset="utf-8">
<style>
  /* set the CSS */

  .line {
    fill: none;
    stroke: steelblue;
    stroke-width: 2px;
  }

  .axis {
    stroke: white;
    font-size: 12px;
  }

  .domain {
    stroke: white;
  }

  .tick line {
    stroke: white;
  }

  circle {
    fill: red;
    stroke: white;
    stroke-width: 2px;
  }

  div.tooltip {
    position: absolute;
    text-align: center;
    width: 100px;
    height: 50px;
    padding: 2px;
    font: 16px sans-serif;
    font-weight: 450;
    background: lightsteelblue;
    border: 0px;
    border-radius: 8px;
    pointer-events: none;
  }
</style>
<!-- load the d3.js library -->
<script src="https://d3js.org/d3.v4.min.js"></script>
<script>
  // set the dimensions and margins of the graph
  document.addEventListener('DOMContentLoaded', function () {
    var parent = document.getElementById('timeline');
    var margin = { top: 20, right: 80, bottom: 30, left: 50 },
      width = parent.clientWidth - margin.left - margin.right,
      height = 200 - margin.top - margin.bottom;
    // parse the date / time
    var parseTime = d3.timeParse("%Y-%m-%d");
    // set the ranges
    var x = d3.scaleTime().range([0, width]);
    var y = d3.scaleLinear().range([height, 0]);
    // define the line
    var valueline = d3.line()
      .x(function (d) { return x(d.date); })
      .y(function (d) { return y(d.close); });
    // append the svg obgect to the body of the page
    // appends a 'group' element to 'svg'
    // moves the 'group' element to the top left margin
    var svg = d3.select("#timeline").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform",
        "translate(" + margin.left + "," + margin.top + ")");

    var div = d3.select("body").append("div")
      .attr("class", "tooltip")
      .style("opacity", 0);
    var contracts = <%- JSON.stringify(mostRecentNextSixMonthContracts); %>
    var data = [];
    // format the data
    console.log(data[0]);
    contracts.forEach(function (d) {
      var contract = {}
      contract.date = parseTime(d.ExpiredDate);
      contract.value = 200;
      contract.pib = d.company.PIB;
      contract.companyName = d.company.Name;
      data.push(contract);
    });
    console.log(data[0]);
    // scale the range of the data
    var now = new Date();
    var sixMonth = new Date();
    sixMonth.setMonth(sixMonth.getMonth() + 6);

    console.log(now, sixMonth);

    maxDate = d3.max(data, function (d) { return d.date; });

    x.domain([now, new Date(Math.min(sixMonth.getTime(), maxDate.getTime() + 1000 * 24 * 60 * 60 * 5))]);
    y.domain([0, 400]);
    // add the valueline path.
    svg.append("path")
      .data([data])
      .attr("class", "line")
      .attr("d", valueline);
    // add the dots
    svg.selectAll("dot")
      .data(data)
      .enter()
      .append("a")
      .attr("xlink:href", function(d) { return "/company-info/" + d.pib; })
      .append("circle")
      .attr("r", 10)
      .attr("cx", function (d) { return x(d.date); })
      .attr("cy", function (d) { return y(d.value); })
      .on("mouseover", function (d) {
        div.transition()
          .duration(200)
          .style("opacity", .9);
        div.html(d.date.toISOString().slice(0, 10) + "<br/>" + d.companyName)
          .style("left", (d3.event.pageX) + "px")
          .style("top", (d3.event.pageY - 28) + "px");
      })
      .on("mouseout", function (d) {
        div.transition()
          .duration(500)
          .style("opacity", 0);
      });
    // add the X Axis
    svg.append("g")
      .attr("transform", "translate(0," + height + ")")
      .attr("class", "axis")
      .call(d3.axisBottom(x));
  }, false);
</script>